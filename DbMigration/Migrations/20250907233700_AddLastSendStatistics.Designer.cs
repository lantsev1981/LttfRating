// <auto-generated />
using System;
using DbMigration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DbMigration.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250907233700_AddLastSendStatistics")]
    partial class AddLastSendStatistics
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Gamer", b =>
                {
                    b.Property<string>("Login")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime?>("LastSendStatistics")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Login");

                    b.HasIndex("Rating");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Gamers");
                });

            modelBuilder.Entity("Domain.GamerMatch", b =>
                {
                    b.Property<string>("Login")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid");

                    b.HasKey("Login", "MatchId");

                    b.HasIndex("MatchId");

                    b.ToTable("GamerMatch", (string)null);
                });

            modelBuilder.Entity("Domain.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPending")
                        .HasColumnType("boolean");

                    b.Property<byte>("SetWonCount")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IsPending");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Domain.Set", b =>
                {
                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Num")
                        .HasColumnType("smallint");

                    b.Property<long>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(-1L);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("LostPoint")
                        .HasColumnType("smallint");

                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(-1);

                    b.Property<string>("WinnerLogin")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<byte>("WonPoint")
                        .HasColumnType("smallint");

                    b.HasKey("MatchId", "Num");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.HasIndex("WinnerLogin");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("Domain.TelegramInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdateType")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.HasKey("Id");

                    b.ToTable("TelegramInputs");
                });

            modelBuilder.Entity("Domain.GamerMatch", b =>
                {
                    b.HasOne("Domain.Gamer", "Gamer")
                        .WithMany()
                        .HasForeignKey("Login")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gamer");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Domain.Set", b =>
                {
                    b.HasOne("Domain.Match", "Match")
                        .WithMany("Sets")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Domain.TelegramInput", b =>
                {
                    b.OwnsOne("Domain.TelegramInputSender", "Sender", b1 =>
                        {
                            b1.Property<Guid>("TelegramInputId")
                                .HasColumnType("uuid");

                            b1.Property<long>("Id")
                                .HasColumnType("bigint")
                                .HasColumnName("SenderId");

                            b1.Property<string>("Login")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("SenderLogin");

                            b1.HasKey("TelegramInputId");

                            b1.ToTable("TelegramInputs");

                            b1.WithOwner()
                                .HasForeignKey("TelegramInputId");
                        });

                    b.Navigation("Sender")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Match", b =>
                {
                    b.Navigation("Sets");
                });
#pragma warning restore 612, 618
        }
    }
}
