namespace LttfRating;

public class TelegramInputBackgroundService(
    ILogger<BaseBackgroundService> baseLogger,
    ILogger<TelegramInputBackgroundService> logger,
    IServiceProvider serviceProvider,
    IOptions<ApiConfig> config)
    : BaseBackgroundService(baseLogger)
{
    private readonly ApiConfig _config = config.Value;

    protected override async Task<TimeSpan> Do(CancellationToken token)
    {
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var store = scope.ServiceProvider.GetRequiredService<IUnitOfWork>();

        var inputs = await store.TelegramInputStore.GetItems(token);
        foreach (var input in inputs)
        {
            try
            {
                await DoItem(mediator, store, input, token);
            }
            catch (ValidationException e)
            {
                logger.LogError(
                    e,
                    """
                    –°–æ–æ–±—â–µ–Ω–∏–µ {@Input}: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({Message})
                    """,
                    input,
                    e.GetAllMessages());
                
                await SendValidationError(mediator, input.ChatId, input.Sender.Login, e.Message, token);
            }
            catch (Exception e)
            {
                logger.LogError(
                    e,
                    """
                    –°–æ–æ–±—â–µ–Ω–∏–µ {@Input}: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({Message})
                    """,
                    input,
                    e.GetAllMessages());
            }
                
            await store.TelegramInputStore.DeleteItem(input, token);
        }

        return _config.TelegramInputInterval;
    }

    private async Task DoItem(
        IMediator mediator,
        IUnitOfWork store,
        TelegramInput input,
        CancellationToken token)
    {
        logger.LogTrace("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {Text} –æ—Ç @{Username}",
            input.Text, input.Sender.Login);
        
        // –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (await mediator.Send(new AddGamerCommand(input.Sender.Login, input.Sender.Id), token))
        {
            var admin = await store.GameStore.GetAdminGamerId(token);

            if (admin?.UserId is not null)
            {
                await mediator.Send(new SendMessageQuery(admin.UserId.Value,
                    $"""
                     üÜï <b>–ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨</b>
                     ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

                     ‚îú ID: <code>{input.Sender.Id}</code>
                     ‚îú –õ–æ–≥–∏–Ω: @{input.Sender.Login}
                     """), token);

                // ‚îú –ò–º—è: {data.User.BaseUser.FirstName}
                // ‚îú –§–∞–º–∏–ª–∏—è: {data.User.BaseUser.LastName ?? "-"}
                // ‚îî –Ø–∑—ã–∫: {data.User.BaseUser.LanguageCode ?? "-"}
            }
        }

        var commandType = input.GetCommandType();
        switch (commandType)
        {
            case CommandType.Start:
                await mediator.Send(new SendMessageQuery(input.Sender.Id,
                    """
                    ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á—ë—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ Lttf –∏–≥—Ä–æ–∫–æ–≤ –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å!</b>

                    üìå <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>
                    ‚Ä¢ –ù–∞–∂–º–∏ /start —á—Ç–æ –±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–∫—É
                    ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
                      <code>@—Å–æ–ø–µ—Ä–Ω–∏–∫ 9 11</code>
                      ‚òùÔ∏è —Ç–µ–≥–Ω–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏ –ø—Ä–æ—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Ç–∏–∏, –≥–¥–µ 9 —ç—Ç–æ —Ç–≤–æ–∏ –æ—á–∫–∏, –∞ 11 —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
                      ‚òùÔ∏è –≤ –∫–æ–Ω—Ü–µ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –≤ –º–∞—Ç—á–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ 3 –ø–æ–±–µ–¥)
                    ‚Ä¢ –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—é —Ä–µ–π—Ç–∏–Ω–≥
                    ‚Ä¢ –ü–æ—Å—Ç–∞–≤—å üëé –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–∏–ø–∞ <code>@—Å–æ–ø–µ—Ä–Ω–∏–∫ 9 11</code> –µ—Å–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–ª–∏ –æ–Ω–∏ –≤–≤–µ–¥–µ–Ω—ã –æ—à–∏–±–æ—á–Ω–æ
                      ‚òùÔ∏è —É–¥–∞–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞ –ø–æ—Å–ª–µ –∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å /rating —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥, –º–µ—Å—Ç–æ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å <code>/rating @–∏–≥—Ä–æ–∫</code> —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥, –º–µ—Å—Ç–æ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                    ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å <code>/rating @–∏–≥—Ä–æ–∫1 @–∏–≥—Ä–æ–∫2</code> —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏

                    –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ <a href="https://t.me/lantsev1981">—Å–æ–∑–¥–∞—Ç–µ—é</a>
                    –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∑—ã—Ä–∏—Ç—å <a href="https://github.com/lantsev1981/LttfRating">–∫–æ–¥</a>
                    –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å <a href="https://www.tbank.ru/cf/1k4w2TmaoyE">–∫–ª–∏–∫–∞–π</a> –∏–ª–∏ —Å–∫–∞–Ω–∏—Ä—É–π QR-code
                    """, FileName: "LttfRatingBotQr.jpg"), token);
                break;
            case CommandType.GetRating:
                await mediator.Send(new SendRatingQuery(input), token);
                break;
            case CommandType.CompareRating:
                await mediator.Send(new SendCompareQuery(input), token);   
                break;
            case CommandType.RecalculateRating:
                await mediator.Send(new RecalculateRatingCommand(input), token);
                break;
            case CommandType.SetScore:
                await mediator.Send(new SetScoreCommand(input), token);
                break;
            case CommandType.DeleteSet:
                await mediator.Send(new DeleteSetCommand(input), token);
                break;
        }
    }
        
    async Task SendValidationError(IMediator mediator, long chatId, string username, string errorMessage, CancellationToken token)
    {
        var adminLinks = string.Join(", ", _config.Administrators.Select(admin =>
            $"<a href=\"tg://user?id={admin}\">@{admin}</a>"));

        await mediator.Send(new SendMessageQuery(chatId,
            $"""
             ‚ö†Ô∏è @{username}, {errorMessage}.

             –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:
             {adminLinks}
             """), token);
    }
}