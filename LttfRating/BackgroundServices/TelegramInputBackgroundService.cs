namespace LttfRating;

public class TelegramInputBackgroundService(
    ILogger<BaseBackgroundService> baseLogger,
    ILogger<TelegramInputBackgroundService> logger,
    IServiceProvider serviceProvider,
    IOptions<ApiConfig> config)
    : BaseBackgroundService(baseLogger)
{
    private readonly ApiConfig _config = config.Value;

    protected override async Task<TimeSpan> Do(CancellationToken token)
    {
        using var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var store = scope.ServiceProvider.GetRequiredService<IUnitOfWork>();

        var items = await store.TelegramInputStore.GetItems(token);

        foreach (var item in items)
        {
            try
            {
                await DoItem(mediator, store, item, token);
            }
            catch (Exception e)
            {
                logger.LogError(e,
                    "–°–æ–æ–±—â–µ–Ω–∏–µ {@Input}: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {@Message}",
                    item, e.GetAllMessages());

                var messageText = e switch
                {
                    ValidationException =>
                        $"""
                         ü§¨ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
                         
                           {e.Message}
                         """,
                    ApiRequestException exp =>
                        $"""
                         ü§¨ Telegram API Error [{exp.HttpStatusCode}]
                         
                           {e.Message}
                         """,
                    _ => null
                };

                if (!string.IsNullOrWhiteSpace(messageText))
                {
                    await mediator.Send(new SendMessageQuery(item.ChatId,
                        messageText, MessageId: item.MessageId, DisableNotification: false), token);
                }

                await mediator.Send(new SendMessageQuery(item.ChatId,
                    "ü§¨", MessageId: item.MessageId, DisableNotification: false), token);
            }

            await store.TelegramInputStore.DeleteItem(item, token);
        }

        return _config.TelegramInputInterval;
    }

    private async Task DoItem(
        IMediator mediator,
        IUnitOfWork store,
        TelegramInput item,
        CancellationToken token)
    {
        logger.LogTrace("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {Text} –æ—Ç @{Username}",
            item.Text, item.Sender.Login);
        
        await mediator.Send(new SendMessageQuery(item.ChatId,
            "üë®‚Äçüíª", MessageId: item.MessageId), token);

        // –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (await mediator.Send(new AddGamerCommand(item.Sender.Login, item.Sender.Id), token))
        {
            var admin = await store.GamerStore.GetAdminGamerId(token);

            if (admin?.UserId is not null)
            {
                await mediator.Send(new SendMessageQuery(admin.UserId.Value,
                    $"""
                     üÜï <b>–ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨</b>
                     ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

                     ‚îú ID: <code>{item.Sender.Id}</code>
                     ‚îî –õ–æ–≥–∏–Ω: @{item.Sender.Login}
                     """, DisableNotification: false), token);

                // ‚îú –ò–º—è: {data.User.BaseUser.FirstName}
                // ‚îú –§–∞–º–∏–ª–∏—è: {data.User.BaseUser.LastName ?? "-"}
                // ‚îî –Ø–∑—ã–∫: {data.User.BaseUser.LanguageCode ?? "-"}
            }
        }

        var commandType = item.GetCommandType();
        switch (commandType)
        {
            case CommandType.Start:
                await mediator.Send(new SendMessageQuery(item.Sender.Id,
                    """
                    ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á—ë—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ Lttf –∏–≥—Ä–æ–∫–æ–≤ –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å!</b>

                    üìå <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>
                    ‚Ä¢ –ù–∞–∂–º–∏ /start —á—Ç–æ –±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–∫—É
                    ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
                      <code>@—Å–æ–ø–µ—Ä–Ω–∏–∫ 9 11</code>
                      ‚òùÔ∏è —Ç–µ–≥–Ω–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏ –ø—Ä–æ—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Ç–∏–∏ (‚öîÔ∏è), –≥–¥–µ 9 —ç—Ç–æ —Ç–≤–æ–∏ –æ—á–∫–∏ (‚óè), –∞ 11 —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
                      ‚òùÔ∏è –≤ –∫–æ–Ω—Ü–µ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –≤ –º–∞—Ç—á–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ 3 –ø–æ–±–µ–¥)
                    ‚Ä¢ –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—é —Ä–µ–π—Ç–∏–Ω–≥

                    –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ <a href="https://t.me/lantsev1981">—Å–æ–∑–¥–∞—Ç–µ—é</a>
                    –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∑—ã—Ä–∏—Ç—å <a href="https://github.com/lantsev1981/LttfRating">–∫–æ–¥</a>
                    –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å <a href="https://www.tbank.ru/cf/1k4w2TmaoyE">–∫–ª–∏–∫–∞–π</a> –∏–ª–∏ —Å–∫–∞–Ω–∏—Ä—É–π QR-code
                    """, FileName: "LttfRatingBotQr.jpg", DisableNotification: false), token);
                break;
            case CommandType.GetRating:
                await mediator.Send(new SendRatingQuery(item, false), token);
                break;
            case CommandType.CompareRating:
                await mediator.Send(new SendCompareQuery(item), token);
                break;
            case CommandType.RecalculateRating:
                await mediator.Send(new RecalculateRatingCommand(item), token);
                break;
            case CommandType.SetScore:
                await mediator.Send(new SetScoreCommand(item), token);
                break;
            case CommandType.DeleteSet:
                await mediator.Send(new DeleteSetCommand(item), token);
                break;
        }

        await mediator.Send(new SendMessageQuery(item.ChatId,
            "üëç", MessageId: item.MessageId), token);
    }
}